{
  "name": "104-2. ExerciseMaker-2",
  "nodes": [
    {
      "parameters": {
        "multipleMethods": true,
        "httpMethod": [
          "POST"
        ],
        "path": "exercise2",
        "responseMode": "responseNode",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "ab5a4a2d-5015-4b0e-aa85-82450598aac7",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [
        240,
        -96
      ],
      "webhookId": "cf077111-2de1-4074-a235-7ac7e88ebccb",
      "retryOnFail": false,
      "typeVersion": 2.1,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "6decf512-4136-455a-9507-96860c0dc06a",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        240,
        160
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "o1pUX0sSSunBHGtz",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "2321ee9c-1568-4d8c-b89b-03b3b49b2935",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        1008,
        -96
      ],
      "typeVersion": 1.4
    },
    {
      "parameters": {
        "jsCode": "// 1) 원문 가져오기\nlet raw = $input.first().json.output ?? \"\";\n\n// 2) 코드블록 ```json / ``` 제거 + 앞뒤 공백 제거\nraw = raw.replace(/```json/g, \"\").replace(/```/g, \"\").trim();\n\n// 3) title / description 안전 추출 (따옴표 내부만 캡처)\nconst pick = (re) => {\n  const m = re.exec(raw);\n  return m ? m[1].trim() : \"\";\n};\nconst title = pick(/\"title\"\\s*:\\s*\"([^\"]*)\"/s);\nconst description = pick(/\"description\"\\s*:\\s*\"([^\"]*)\"/s);\n\n// 4) contents 추출\n//    - \"contents\": 이후 전체를 가져오되, 선행 따옴표/후행 따옴표/닫는 중괄호 등을 정리\nlet contentsPart = raw.split(/\"contents\"\\s*:/)[1] || \"\";\n\n// 선행/후행 공백 제거\ncontentsPart = contentsPart.trim();\n\n// 선행 따옴표 하나 제거 (있다면)\nif (contentsPart.startsWith('\"')) contentsPart = contentsPart.slice(1);\n\n// 맨 끝쪽의 마지막 따옴표 + 그 뒤의 쉼표/괄호 제거\n// 끝에서부터 첫 따옴표 위치를 찾아 거기까지만 취함\nconst lastQuote = contentsPart.lastIndexOf('\"');\nif (lastQuote >= 0) {\n  contentsPart = contentsPart.slice(0, lastQuote);\n}\n\n// 흔한 이스케이프 복원: \\\\n -> 실제 개행, \\\\\" -> \"\nlet contents = contentsPart\n  .replace(/\\\\n/g, \"\\n\")\n  .replace(/\\\\t/g, \"\\t\")\n  .replace(/\\r/g, \"\")        // 캐리지리턴 제거\n  .replace(/\\\\\"/g, '\"');     // 이스케이프 따옴표 복원\n\n// 혹시 남아있는 JSON 꼬리 제거(드물게 들어온 경우 방지)\ncontents = contents.replace(/\\s*}\\s*$/s, \"\").trim();\n\n// 5) 결과 리턴 (스키마: title/description/contents)\nreturn [\n  {\n    json: {\n      title,\n      description,\n      contents\n    }\n  }\n];\n"
      },
      "id": "ce8fa508-5320-492e-80f3-cdf147ccfa62",
      "name": "Code in JavaScript",
      "type": "n8n-nodes-base.code",
      "position": [
        816,
        -96
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=={{ \n\"Course Title: \" + $json.body.courseTitle + \"\\n\" +\n\"course Description: \" + $json.body.courseDescription + \"\\n\\n\" +\n\"Chapter Title: \" + $json.body.chapterTitle + \"\\n\" +\n\"Chapter Description: \" + $json.body.chapterDescription\n}}\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "당신은 JSON 응답 전용 AI입니다.\n\n입력 데이터는 다음 형식으로 주어집니다:\n\n\t\"courseTitle\": \"string\",\n\t\"courseDescription\": \"string\",\n\t\"chapterTitle\": \"string\",\n\t\"chapterDescription\": \"string\"\n\n작업:\nYou are an AI assistant specializing in education and personalized learning. Your task is to generate approximately three distinct, personalized self-study exercises. These exercises should focus on basic concepts relevant to the provided chapter ID, course title, course description, and the user's learning profile details. The output should be clearly structured, presenting each of the three exercises distinctly.\n# Step by Step instructions\n1. Review the provided Chapter ID, Course Title, Course Description, and Prompt to understand the context and the learner's profile details.\n2. Generate the first personalized self-study exercise, focusing on basic concepts relevant to the Chapter ID, Course Title, Course Description, and the chapter's description.\n3. Generate the second personalized self-study exercise, ensuring it is distinct from the first and also focuses on basic concepts relevant to the Chapter ID, Course Title, Course Description, and the learner's profile details.\n4. Generate the third personalized self-study exercise, ensuring it is distinct from the previous two and also focuses on basic concepts relevant to the Course Title, Course Description, Chapter title, and its description.\n5. Review the three generated exercises. Are there approximately three distinct exercises? If not, go back to step 2 and adjust or regenerate the exercises as needed to meet the count and distinctness requirements.\n6. Ensure each exercise is clearly structured and presented individually.\noutput languageL ko\n\n\n출력 형식 (반드시 JSON):\n{\n  \"title\": \"string\",\n  \"description\": \"string\",\n  \"contents\": \"string\"\n}\n\n⚠️ 규칙:\n- 반드시 위 JSON 구조만 출력하세요.\n- 절대로 {\"output\": {...}} 또는 문자열(JSON string) 형태로 감싸지 마세요.\n- 대화형 멘트, 설명, 사족 없이 오직 JSON 데이터만 출력하세요.\n- \"contents\" 필드는 markdown 문서 본문으로 채우세요 .\n⚠️ 출력 시 절대로 Markdown 코드블록(````json`, ``` 등)을 포함하지 마세요.\n⚠️ 절대로 {\"output\": {...}} 형태로 감싸지 말고, \n오직 {\"title\": \"...\", \"description\": \"...\", \"contents\": \"...\"} 구조로만 출력하세요.\n"
        }
      },
      "id": "d48e48d7-6eb0-4d17-847e-14d908f9beda",
      "name": "ExerciseMaker",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        448,
        -96
      ],
      "typeVersion": 3,
      "onError": "continueRegularOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "ExerciseMaker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ExerciseMaker": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "ExerciseMaker",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "dcae5d2c-944d-4be0-aaa6-49b4da334612",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "80eb4af7e1f0a6b1250e1e59a96c1b5d5d7138f42a94f997f80629b587ebbfc8"
  },
  "id": "1IzJMGmq0bgUatjl",
  "tags": []
}